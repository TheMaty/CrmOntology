 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using CRMOntology.RDFLayer.Entities.Party.Customer;
using CRMOntology.RDFLayer.Entities.Party.Customer.Account;
using CRMOntology.RDFLayer.Entities.Party.Customer.Contact;
using CRMOntology.RDFLayer.Entities.Sales.Product;
using CRMOntology.RDFLayer.Entities.Demographics.Address.Postal;
using CRMOntology.RDFLayer.Entities.Demographics;
using CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions;
using CRMOntology.RDFLayer.Entities.Marketing;
using CRMOntology.RDFLayer.Entities.Sales;
using CRMOntology.RDFLayer.Entities.Activity;
using CRMOntology.RDFLayer.Entities.Case;
using CRMOntology.RDFLayer.Entities.Demographics.Address;
using CRMOntology.RDFLayer.Entities.Characteristics.Perception;
using CRMOntology.RDFLayer.Entities.Characteristics;

namespace CRMOntology.RDFLayer 
{
    public partial class CRMOntologyContext : BrightstarEntityContext {
    	
    	static CRMOntologyContext() 
    	{
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Accurate.IAccurate));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Accurate.IAccurate, CRMOntology.RDFLayer.Entities.Accurate.Accurate>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.IActivity));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.IActivity, CRMOntology.RDFLayer.Entities.Activity.Activity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.IAppointment));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.IAppointment, CRMOntology.RDFLayer.Entities.Activity.Appointment>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity, CRMOntology.RDFLayer.Entities.Activity.CampaignActivity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.IEmail));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.IEmail, CRMOntology.RDFLayer.Entities.Activity.Email>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.IFax));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.IFax, CRMOntology.RDFLayer.Entities.Activity.Fax>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.ILetter));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.ILetter, CRMOntology.RDFLayer.Entities.Activity.Letter>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.IPhone));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.IPhone, CRMOntology.RDFLayer.Entities.Activity.Phone>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Activity.ITask));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Activity.ITask, CRMOntology.RDFLayer.Entities.Activity.Task>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict, CRMOntology.RDFLayer.Entities.Billing.Credict.Credict>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Billing.IBilling));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Billing.IBilling, CRMOntology.RDFLayer.Entities.Billing.Billing>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Case.ICase));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Case.ICase, CRMOntology.RDFLayer.Entities.Case.Case>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Case.IContract));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Case.IContract, CRMOntology.RDFLayer.Entities.Case.Contract>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Case.IEntitlement));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Case.IEntitlement, CRMOntology.RDFLayer.Entities.Case.Entitlement>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Case.IEquipment));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Case.IEquipment, CRMOntology.RDFLayer.Entities.Case.Equipment>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Case.IIncident));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Case.IIncident, CRMOntology.RDFLayer.Entities.Case.Incident>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude, CRMOntology.RDFLayer.Entities.Characteristics.Attitude.Attitude>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience, CRMOntology.RDFLayer.Entities.Characteristics.Attitude.NegativeExperience>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience, CRMOntology.RDFLayer.Entities.Characteristics.Attitude.PositiveExperience>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics, CRMOntology.RDFLayer.Entities.Characteristics.Characteristics>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge, CRMOntology.RDFLayer.Entities.Characteristics.Knowledge>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle, CRMOntology.RDFLayer.Entities.Characteristics.LifeStyle>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.Behavioral>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.Consumer>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.Desire>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.Drive>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.LatentNeed>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation, CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Motivation>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception, CRMOntology.RDFLayer.Entities.Characteristics.Perception.Perception>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf, CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.Self>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress, CRMOntology.RDFLayer.Entities.Demographics.Address.Address>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic, CRMOntology.RDFLayer.Entities.Demographics.Address.Electronic>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb, CRMOntology.RDFLayer.Entities.Demographics.Address.Web>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity, CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.City>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet, CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.Street>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry, CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.Country>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal, CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Postal>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.IDemographics));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.IDemographics, CRMOntology.RDFLayer.Entities.Demographics.Demographics>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.IGender));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.IGender, CRMOntology.RDFLayer.Entities.Demographics.Gender>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus, CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.MaritialStatus>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IAnnotation));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IAnnotation, CRMOntology.RDFLayer.Entities.Annotation>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IArticle));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IArticle, CRMOntology.RDFLayer.Entities.Article>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IAttachment));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IAttachment, CRMOntology.RDFLayer.Entities.Attachment>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IConnection));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IConnection, CRMOntology.RDFLayer.Entities.Connection>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IConnectionRole));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IConnectionRole, CRMOntology.RDFLayer.Entities.ConnectionRole>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IConnectionRoleCategory));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IConnectionRoleCategory, CRMOntology.RDFLayer.Entities.ConnectionRoleCategory>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IKbArticle));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IKbArticle, CRMOntology.RDFLayer.Entities.KbArticle>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.IRole));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.IRole, CRMOntology.RDFLayer.Entities.Role>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.ISubject));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.ISubject, CRMOntology.RDFLayer.Entities.Subject>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.ITeam));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.ITeam, CRMOntology.RDFLayer.Entities.Team>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.IChurn));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.IChurn, CRMOntology.RDFLayer.Entities.Loyality.Churn>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.ILoyality));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.ILoyality, CRMOntology.RDFLayer.Entities.Loyality.Loyality>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.IRetention));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.IRetention, CRMOntology.RDFLayer.Entities.Loyality.Retention>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward, CRMOntology.RDFLayer.Entities.Loyality.Reward.Reward>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold, CRMOntology.RDFLayer.Entities.Loyality.Segment.Gold>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium, CRMOntology.RDFLayer.Entities.Loyality.Segment.Premium>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment, CRMOntology.RDFLayer.Entities.Loyality.Segment.Segment>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver, CRMOntology.RDFLayer.Entities.Loyality.Segment.Silver>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Marketing.ICampaign));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Marketing.ICampaign, CRMOntology.RDFLayer.Entities.Marketing.Campaign>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Marketing.IGoal));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Marketing.IGoal, CRMOntology.RDFLayer.Entities.Marketing.Goal>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Marketing.IMarketing));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Marketing.IMarketing, CRMOntology.RDFLayer.Entities.Marketing.Marketing>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount, CRMOntology.RDFLayer.Entities.Party.Customer.Account.Account>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile, CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.Profile>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments, CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.Governments>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments, CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.NonGovernments>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType, CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.Type>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.Emotion>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Contact>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.Aggreeableness>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.Conscientiousness>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.ExtraVersion>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.Neuroticism>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.Openness>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality, CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.Personality>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer, CRMOntology.RDFLayer.Entities.Party.Customer.Customer>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.Customer.ILead));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.Customer.ILead, CRMOntology.RDFLayer.Entities.Party.Customer.Lead>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.IBusinessUnit));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.IBusinessUnit, CRMOntology.RDFLayer.Entities.Party.BusinessUnit>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.ICompetitor));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.ICompetitor, CRMOntology.RDFLayer.Entities.Party.Competitor>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.IParty));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.IParty, CRMOntology.RDFLayer.Entities.Party.Party>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Party.ISystemUser));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Party.ISystemUser, CRMOntology.RDFLayer.Entities.Party.SystemUser>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.ICall));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.ICall, CRMOntology.RDFLayer.Entities.Preference.Call>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.IPreference));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.IPreference, CRMOntology.RDFLayer.Entities.Preference.Preference>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail, CRMOntology.RDFLayer.Entities.Preference.SendBulkEMail>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.ISendEMail));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.ISendEMail, CRMOntology.RDFLayer.Entities.Preference.SendEMail>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.ISendFax));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.ISendFax, CRMOntology.RDFLayer.Entities.Preference.SendFax>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Preference.ISendMail));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Preference.ISendMail, CRMOntology.RDFLayer.Entities.Preference.SendMail>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.IInvoice));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.IInvoice, CRMOntology.RDFLayer.Entities.Sales.Invoice>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.IOpportunity));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.IOpportunity, CRMOntology.RDFLayer.Entities.Sales.Opportunity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.IOrder));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.IOrder, CRMOntology.RDFLayer.Entities.Sales.Order>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.IQuote));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.IQuote, CRMOntology.RDFLayer.Entities.Sales.Quote>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.ISales));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.ISales, CRMOntology.RDFLayer.Entities.Sales.Sales>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IGoods));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.Product.IGoods, CRMOntology.RDFLayer.Entities.Sales.Product.Goods>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses, CRMOntology.RDFLayer.Entities.Sales.Product.Processes>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IProduct));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct, CRMOntology.RDFLayer.Entities.Sales.Product.Product>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IServices));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Sales.Product.IServices, CRMOntology.RDFLayer.Entities.Sales.Product.Services>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(CRMOntology.RDFLayer.Entities.Shipping.IShipping));
    		EntityMappingStore.Instance.SetImplMapping<CRMOntology.RDFLayer.Entities.Shipping.IShipping, CRMOntology.RDFLayer.Entities.Shipping.Shipping>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public CRMOntologyContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public CRMOntologyContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public CRMOntologyContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public CRMOntologyContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Accurates = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Accurate.IAccurate>(this);
    		Activities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.IActivity>(this);
    		Appointments = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.IAppointment>(this);
    		CampaignActivities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity>(this);
    		Emails = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.IEmail>(this);
    		Faxs = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.IFax>(this);
    		Letters = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.ILetter>(this);
    		Phones = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.IPhone>(this);
    		Tasks = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Activity.ITask>(this);
    		Credicts = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict>(this);
    		Billings = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Billing.IBilling>(this);
    		Cases = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Case.ICase>(this);
    		Contracts = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Case.IContract>(this);
    		Entitlements = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Case.IEntitlement>(this);
    		Equipments = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Case.IEquipment>(this);
    		Incidents = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Case.IIncident>(this);
    		Attitudes = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude>(this);
    		NegativeExperiences = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience>(this);
    		PositiveExperiences = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience>(this);
    		Characteristicss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>(this);
    		Knowledges = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge>(this);
    		LifeStyles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle>(this);
    		Behaviorals = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral>(this);
    		Consumers = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>(this);
    		Desires = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire>(this);
    		Drives = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive>(this);
    		LatentNeeds = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed>(this);
    		Motivations = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation>(this);
    		Perceptions = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>(this);
    		Selfs = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf>(this);
    		Addresss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>(this);
    		Electronics = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic>(this);
    		Webs = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb>(this);
    		Cities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity>(this);
    		Streets = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet>(this);
    		Countries = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry>(this);
    		Postals = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal>(this);
    		Demographicss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>(this);
    		Genders = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.IGender>(this);
    		MaritialStatuss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus>(this);
    		Annotations = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IAnnotation>(this);
    		Articles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IArticle>(this);
    		Attachments = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IAttachment>(this);
    		Connections = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IConnection>(this);
    		ConnectionRoles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IConnectionRole>(this);
    		ConnectionRoleCategories = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IConnectionRoleCategory>(this);
    		KbArticles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IKbArticle>(this);
    		Roles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.IRole>(this);
    		Subjects = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.ISubject>(this);
    		Teams = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.ITeam>(this);
    		Churns = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.IChurn>(this);
    		Loyalities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.ILoyality>(this);
    		Retentions = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.IRetention>(this);
    		Rewards = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward>(this);
    		Golds = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold>(this);
    		Premiums = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium>(this);
    		Segments = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>(this);
    		Silvers = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver>(this);
    		Campaigns = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Marketing.ICampaign>(this);
    		Goals = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Marketing.IGoal>(this);
    		Marketings = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>(this);
    		Accounts = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>(this);
    		Profiles = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile>(this);
    		Governmentss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments>(this);
    		NonGovernmentss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments>(this);
    		Types = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType>(this);
    		Emotions = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion>(this);
    		Contacts = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>(this);
    		Aggreeablenesss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness>(this);
    		Conscientiousnesss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness>(this);
    		ExtraVersions = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion>(this);
    		Neuroticisms = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism>(this);
    		Opennesss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness>(this);
    		Personalities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>(this);
    		Customers = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>(this);
    		Leads = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.ILead>(this);
    		BusinessUnits = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.IBusinessUnit>(this);
    		Competitors = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.ICompetitor>(this);
    		Parties = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.IParty>(this);
    		SystemUsers = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Party.ISystemUser>(this);
    		Calls = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.ICall>(this);
    		Preferences = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.IPreference>(this);
    		SendBulkEMails = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail>(this);
    		SendEMails = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendEMail>(this);
    		SendFaxs = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendFax>(this);
    		SendMails = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendMail>(this);
    		Invoices = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.IInvoice>(this);
    		Opportunities = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.IOpportunity>(this);
    		Orders = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.IOrder>(this);
    		Quotes = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.IQuote>(this);
    		Saless = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.ISales>(this);
    		Goodss = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IGoods>(this);
    		Processess = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses>(this);
    		Products = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>(this);
    		Servicess = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IServices>(this);
    		Shippings = 	new BrightstarEntitySet<CRMOntology.RDFLayer.Entities.Shipping.IShipping>(this);
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Accurate.IAccurate> Accurates
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.IActivity> Activities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.IAppointment> Appointments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity> CampaignActivities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.IEmail> Emails
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.IFax> Faxs
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.ILetter> Letters
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.IPhone> Phones
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Activity.ITask> Tasks
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict> Credicts
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Billing.IBilling> Billings
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Case.ICase> Cases
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Case.IContract> Contracts
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Case.IEntitlement> Entitlements
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Case.IEquipment> Equipments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Case.IIncident> Incidents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude> Attitudes
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience> NegativeExperiences
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience> PositiveExperiences
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics> Characteristicss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge> Knowledges
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle> LifeStyles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral> Behaviorals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer> Consumers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire> Desires
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive> Drives
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed> LatentNeeds
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation> Motivations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception> Perceptions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf> Selfs
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress> Addresss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic> Electronics
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb> Webs
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity> Cities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet> Streets
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry> Countries
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal> Postals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.IDemographics> Demographicss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.IGender> Genders
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus> MaritialStatuss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IAnnotation> Annotations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IArticle> Articles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IAttachment> Attachments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IConnection> Connections
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IConnectionRole> ConnectionRoles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IConnectionRoleCategory> ConnectionRoleCategories
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IKbArticle> KbArticles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.IRole> Roles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.ISubject> Subjects
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.ITeam> Teams
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.IChurn> Churns
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.ILoyality> Loyalities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.IRetention> Retentions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward> Rewards
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold> Golds
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium> Premiums
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment> Segments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver> Silvers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Marketing.ICampaign> Campaigns
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Marketing.IGoal> Goals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Marketing.IMarketing> Marketings
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile> Profiles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments> Governmentss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments> NonGovernmentss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType> Types
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion> Emotions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness> Aggreeablenesss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness> Conscientiousnesss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion> ExtraVersions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism> Neuroticisms
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness> Opennesss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality> Personalities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer> Customers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.Customer.ILead> Leads
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.IBusinessUnit> BusinessUnits
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.ICompetitor> Competitors
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.IParty> Parties
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Party.ISystemUser> SystemUsers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.ICall> Calls
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.IPreference> Preferences
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail> SendBulkEMails
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendEMail> SendEMails
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendFax> SendFaxs
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Preference.ISendMail> SendMails
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.IInvoice> Invoices
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.IOpportunity> Opportunities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.IOrder> Orders
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.IQuote> Quotes
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.ISales> Saless
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IGoods> Goodss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses> Processess
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Sales.Product.IServices> Servicess
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<CRMOntology.RDFLayer.Entities.Shipping.IShipping> Shippings
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Accurate.IAccurate))) {
                return (IEntitySet<T>)this.Accurates;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.IActivity))) {
                return (IEntitySet<T>)this.Activities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.IAppointment))) {
                return (IEntitySet<T>)this.Appointments;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity))) {
                return (IEntitySet<T>)this.CampaignActivities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.IEmail))) {
                return (IEntitySet<T>)this.Emails;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.IFax))) {
                return (IEntitySet<T>)this.Faxs;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.ILetter))) {
                return (IEntitySet<T>)this.Letters;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.IPhone))) {
                return (IEntitySet<T>)this.Phones;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Activity.ITask))) {
                return (IEntitySet<T>)this.Tasks;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict))) {
                return (IEntitySet<T>)this.Credicts;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Billing.IBilling))) {
                return (IEntitySet<T>)this.Billings;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Case.ICase))) {
                return (IEntitySet<T>)this.Cases;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Case.IContract))) {
                return (IEntitySet<T>)this.Contracts;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Case.IEntitlement))) {
                return (IEntitySet<T>)this.Entitlements;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Case.IEquipment))) {
                return (IEntitySet<T>)this.Equipments;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Case.IIncident))) {
                return (IEntitySet<T>)this.Incidents;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude))) {
                return (IEntitySet<T>)this.Attitudes;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience))) {
                return (IEntitySet<T>)this.NegativeExperiences;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience))) {
                return (IEntitySet<T>)this.PositiveExperiences;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics))) {
                return (IEntitySet<T>)this.Characteristicss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge))) {
                return (IEntitySet<T>)this.Knowledges;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle))) {
                return (IEntitySet<T>)this.LifeStyles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral))) {
                return (IEntitySet<T>)this.Behaviorals;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer))) {
                return (IEntitySet<T>)this.Consumers;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire))) {
                return (IEntitySet<T>)this.Desires;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive))) {
                return (IEntitySet<T>)this.Drives;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed))) {
                return (IEntitySet<T>)this.LatentNeeds;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation))) {
                return (IEntitySet<T>)this.Motivations;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception))) {
                return (IEntitySet<T>)this.Perceptions;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf))) {
                return (IEntitySet<T>)this.Selfs;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress))) {
                return (IEntitySet<T>)this.Addresss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic))) {
                return (IEntitySet<T>)this.Electronics;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb))) {
                return (IEntitySet<T>)this.Webs;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity))) {
                return (IEntitySet<T>)this.Cities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet))) {
                return (IEntitySet<T>)this.Streets;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry))) {
                return (IEntitySet<T>)this.Countries;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal))) {
                return (IEntitySet<T>)this.Postals;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.IDemographics))) {
                return (IEntitySet<T>)this.Demographicss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.IGender))) {
                return (IEntitySet<T>)this.Genders;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus))) {
                return (IEntitySet<T>)this.MaritialStatuss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IAnnotation))) {
                return (IEntitySet<T>)this.Annotations;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IArticle))) {
                return (IEntitySet<T>)this.Articles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IAttachment))) {
                return (IEntitySet<T>)this.Attachments;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IConnection))) {
                return (IEntitySet<T>)this.Connections;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IConnectionRole))) {
                return (IEntitySet<T>)this.ConnectionRoles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IConnectionRoleCategory))) {
                return (IEntitySet<T>)this.ConnectionRoleCategories;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IKbArticle))) {
                return (IEntitySet<T>)this.KbArticles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.IRole))) {
                return (IEntitySet<T>)this.Roles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.ISubject))) {
                return (IEntitySet<T>)this.Subjects;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.ITeam))) {
                return (IEntitySet<T>)this.Teams;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.IChurn))) {
                return (IEntitySet<T>)this.Churns;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.ILoyality))) {
                return (IEntitySet<T>)this.Loyalities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.IRetention))) {
                return (IEntitySet<T>)this.Retentions;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward))) {
                return (IEntitySet<T>)this.Rewards;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold))) {
                return (IEntitySet<T>)this.Golds;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium))) {
                return (IEntitySet<T>)this.Premiums;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment))) {
                return (IEntitySet<T>)this.Segments;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver))) {
                return (IEntitySet<T>)this.Silvers;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Marketing.ICampaign))) {
                return (IEntitySet<T>)this.Campaigns;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Marketing.IGoal))) {
                return (IEntitySet<T>)this.Goals;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Marketing.IMarketing))) {
                return (IEntitySet<T>)this.Marketings;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount))) {
                return (IEntitySet<T>)this.Accounts;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile))) {
                return (IEntitySet<T>)this.Profiles;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments))) {
                return (IEntitySet<T>)this.Governmentss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments))) {
                return (IEntitySet<T>)this.NonGovernmentss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType))) {
                return (IEntitySet<T>)this.Types;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion))) {
                return (IEntitySet<T>)this.Emotions;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact))) {
                return (IEntitySet<T>)this.Contacts;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness))) {
                return (IEntitySet<T>)this.Aggreeablenesss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness))) {
                return (IEntitySet<T>)this.Conscientiousnesss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion))) {
                return (IEntitySet<T>)this.ExtraVersions;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism))) {
                return (IEntitySet<T>)this.Neuroticisms;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness))) {
                return (IEntitySet<T>)this.Opennesss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality))) {
                return (IEntitySet<T>)this.Personalities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer))) {
                return (IEntitySet<T>)this.Customers;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.Customer.ILead))) {
                return (IEntitySet<T>)this.Leads;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.IBusinessUnit))) {
                return (IEntitySet<T>)this.BusinessUnits;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.ICompetitor))) {
                return (IEntitySet<T>)this.Competitors;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.IParty))) {
                return (IEntitySet<T>)this.Parties;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Party.ISystemUser))) {
                return (IEntitySet<T>)this.SystemUsers;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.ICall))) {
                return (IEntitySet<T>)this.Calls;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.IPreference))) {
                return (IEntitySet<T>)this.Preferences;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail))) {
                return (IEntitySet<T>)this.SendBulkEMails;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.ISendEMail))) {
                return (IEntitySet<T>)this.SendEMails;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.ISendFax))) {
                return (IEntitySet<T>)this.SendFaxs;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Preference.ISendMail))) {
                return (IEntitySet<T>)this.SendMails;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.IInvoice))) {
                return (IEntitySet<T>)this.Invoices;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.IOpportunity))) {
                return (IEntitySet<T>)this.Opportunities;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.IOrder))) {
                return (IEntitySet<T>)this.Orders;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.IQuote))) {
                return (IEntitySet<T>)this.Quotes;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.ISales))) {
                return (IEntitySet<T>)this.Saless;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IGoods))) {
                return (IEntitySet<T>)this.Goodss;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses))) {
                return (IEntitySet<T>)this.Processess;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IProduct))) {
                return (IEntitySet<T>)this.Products;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Sales.Product.IServices))) {
                return (IEntitySet<T>)this.Servicess;
            }
            if (typeof(T).Equals(typeof(CRMOntology.RDFLayer.Entities.Shipping.IShipping))) {
                return (IEntitySet<T>)this.Shippings;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class CRMOntologyContext
        
}
namespace CRMOntology.RDFLayer.Entities.Accurate 
{
    
    public partial class Accurate : BrightstarEntityObject, IAccurate 
    {
    	public Accurate(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Accurate(BrightstarEntityContext context) : base(context, typeof(Accurate)) { }
    	public Accurate() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Accurate.IAccurate
    
    	public string Fullfill
    	{
            		get { return GetRelatedProperty<string>("Fullfill"); }
            		set { SetRelatedProperty("Fullfill", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Activity : BrightstarEntityObject, IActivity 
    {
    	public Activity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Activity(BrightstarEntityContext context) : base(context, typeof(Activity)) { }
    	public Activity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.IActivity
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Appointment : BrightstarEntityObject, IAppointment 
    {
    	public Appointment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Appointment(BrightstarEntityContext context) : base(context, typeof(Appointment)) { }
    	public Appointment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.IAppointment
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class CampaignActivity : BrightstarEntityObject, ICampaignActivity 
    {
    	public CampaignActivity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public CampaignActivity(BrightstarEntityContext context) : base(context, typeof(CampaignActivity)) { }
    	public CampaignActivity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.ICampaignActivity
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity Parent
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("Parent"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("Parent", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Email : BrightstarEntityObject, IEmail 
    {
    	public Email(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Email(BrightstarEntityContext context) : base(context, typeof(Email)) { }
    	public Email() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.IEmail
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Fax : BrightstarEntityObject, IFax 
    {
    	public Fax(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Fax(BrightstarEntityContext context) : base(context, typeof(Fax)) { }
    	public Fax() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.IFax
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Letter : BrightstarEntityObject, ILetter 
    {
    	public Letter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Letter(BrightstarEntityContext context) : base(context, typeof(Letter)) { }
    	public Letter() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.ILetter
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Phone : BrightstarEntityObject, IPhone 
    {
    	public Phone(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Phone(BrightstarEntityContext context) : base(context, typeof(Phone)) { }
    	public Phone() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.IPhone
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Activity 
{
    
    public partial class Task : BrightstarEntityObject, ITask 
    {
    	public Task(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Task(BrightstarEntityContext context) : base(context, typeof(Task)) { }
    	public Task() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Activity.ITask
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Activity.IActivity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Activity.IActivity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Billing.Credict 
{
    
    public partial class Credict : BrightstarEntityObject, ICredict 
    {
    	public Credict(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Credict(BrightstarEntityContext context) : base(context, typeof(Credict)) { }
    	public Credict() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Billing.Credict.ICredict
    
    	public System.Boolean Hold
    	{
            		get { return GetRelatedProperty<System.Boolean>("Hold"); }
            		set { SetRelatedProperty("Hold", value); }
    	}
    
    	public System.Decimal Limit
    	{
            		get { return GetRelatedProperty<System.Decimal>("Limit"); }
            		set { SetRelatedProperty("Limit", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Billing.IBilling baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Billing.IBilling>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Billing.IBilling>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Billing 
{
    
    public partial class Billing : BrightstarEntityObject, IBilling 
    {
    	public Billing(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Billing(BrightstarEntityContext context) : base(context, typeof(Billing)) { }
    	public Billing() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Billing.IBilling

        public string Currency
    	{
            get { return GetRelatedProperty<string>("Currency"); }
            		set { SetRelatedProperty("Currency", value); }
    	}

        public string PaymentTerm
    	{
            get { return GetRelatedProperty<string>("PaymentTerm"); }
            		set { SetRelatedProperty("PaymentTerm", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Case 
{
    
    public partial class Case : BrightstarEntityObject, ICase 
    {
    	public Case(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Case(BrightstarEntityContext context) : base(context, typeof(Case)) { }
    	public Case() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Case.ICase
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Case 
{
    
    public partial class Contract : BrightstarEntityObject, IContract 
    {
    	public Contract(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Contract(BrightstarEntityContext context) : base(context, typeof(Contract)) { }
    	public Contract() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Case.IContract
    
    	public CRMOntology.RDFLayer.Entities.Case.ICase baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Case 
{
    
    public partial class Entitlement : BrightstarEntityObject, IEntitlement 
    {
    	public Entitlement(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Entitlement(BrightstarEntityContext context) : base(context, typeof(Entitlement)) { }
    	public Entitlement() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Case.IEntitlement
    
    	public CRMOntology.RDFLayer.Entities.Case.ICase baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Case 
{
    
    public partial class Equipment : BrightstarEntityObject, IEquipment 
    {
    	public Equipment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Equipment(BrightstarEntityContext context) : base(context, typeof(Equipment)) { }
    	public Equipment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Case.IEquipment
    
    	public CRMOntology.RDFLayer.Entities.Case.ICase baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Case 
{
    
    public partial class Incident : BrightstarEntityObject, IIncident 
    {
    	public Incident(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Incident(BrightstarEntityContext context) : base(context, typeof(Incident)) { }
    	public Incident() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Case.IIncident
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Case.ICase baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Case.ICase>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Attitude 
{
    
    public partial class Attitude : BrightstarEntityObject, IAttitude 
    {
    	public Attitude(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Attitude(BrightstarEntityContext context) : base(context, typeof(Attitude)) { }
    	public Attitude() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Attitude 
{
    
    public partial class NegativeExperience : BrightstarEntityObject, INegativeExperience 
    {
    	public NegativeExperience(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public NegativeExperience(BrightstarEntityContext context) : base(context, typeof(NegativeExperience)) { }
    	public NegativeExperience() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Attitude.INegativeExperience
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("Products"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Products", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Attitude 
{
    
    public partial class PositiveExperience : BrightstarEntityObject, IPositiveExperience 
    {
    	public PositiveExperience(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public PositiveExperience(BrightstarEntityContext context) : base(context, typeof(PositiveExperience)) { }
    	public PositiveExperience() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IPositiveExperience
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("Products"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Products", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Attitude.IAttitude>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics 
{
    
    public partial class Characteristics : BrightstarEntityObject, ICharacteristics 
    {
    	public Characteristics(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Characteristics(BrightstarEntityContext context) : base(context, typeof(Characteristics)) { }
    	public Characteristics() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics

        public string Belief
    	{
            		get { return GetRelatedProperty<string>("Belief"); }
            		set { SetRelatedProperty("Belief", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics 
{
    
    public partial class Knowledge : BrightstarEntityObject, IKnowledge 
    {
    	public Knowledge(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Knowledge(BrightstarEntityContext context) : base(context, typeof(Knowledge)) { }
    	public Knowledge() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.IKnowledge
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> AimProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("AimProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("AimProducts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> NeedProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("NeedProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("NeedProducts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> WantProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("WantProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("WantProducts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics 
{
    
    public partial class LifeStyle : BrightstarEntityObject, ILifeStyle 
    {
    	public LifeStyle(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public LifeStyle(BrightstarEntityContext context) : base(context, typeof(LifeStyle)) { }
    	public LifeStyle() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.ILifeStyle
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> ChoiceProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("ChoiceProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChoiceProducts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> PurchaseProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("PurchaseProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("PurchaseProducts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> UseProducts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("UseProducts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("UseProducts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Demographics.IDemographics> Demographics
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("Demographics"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Demographics", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal PostalAddress
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal>("PostalAddress"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal>("PostalAddress", value); }
    	}
    	
    	//[CRMOntology.RDFLayer.DisjointAttribute("ex:subClassOf#", "IAccount")]
    	public CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral 
{
    
    public partial class Behavioral : BrightstarEntityObject, IBehavioral 
    {
    	public Behavioral(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Behavioral(BrightstarEntityContext context) : base(context, typeof(Behavioral)) { }
    	public Behavioral() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Behavioral.IBehavioral

        public string Esteem
    	{
            get { return GetRelatedProperty<string>("Esteem"); }
            		set { SetRelatedProperty("Esteem", value); }
    	}
    	
    	//[CRMOntology.RDFLayer.DisjointAttribute("ex:physicological#", "IAccount")]
        public string Physicological
    	{
            get { return GetRelatedProperty<string>("Physicological"); }
            		set { SetRelatedProperty("Physicological", value); }
    	}

        public string Safety
    	{
            get { return GetRelatedProperty<string>("Safety"); }
            		set { SetRelatedProperty("Safety", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer 
{
    
    public partial class Consumer : BrightstarEntityObject, IConsumer 
    {
    	public Consumer(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Consumer(BrightstarEntityContext context) : base(context, typeof(Consumer)) { }
    	public Consumer() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer 
{
    
    public partial class Desire : BrightstarEntityObject, IDesire 
    {
    	public Desire(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Desire(BrightstarEntityContext context) : base(context, typeof(Desire)) { }
    	public Desire() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDesire
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("Products"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Products", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer 
{
    
    public partial class Drive : BrightstarEntityObject, IDrive 
    {
    	public Drive(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Drive(BrightstarEntityContext context) : base(context, typeof(Drive)) { }
    	public Drive() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IDrive
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("Products"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Products", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer 
{
    
    public partial class LatentNeed : BrightstarEntityObject, ILatentNeed 
    {
    	public LatentNeed(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public LatentNeed(BrightstarEntityContext context) : base(context, typeof(LatentNeed)) { }
    	public LatentNeed() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.ILatentNeed
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct> Products
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("Products"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Products", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Motivation.Consumer.IConsumer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Motivation 
{
    
    public partial class Motivation : BrightstarEntityObject, IMotivation 
    {
    	public Motivation(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Motivation(BrightstarEntityContext context) : base(context, typeof(Motivation)) { }
    	public Motivation() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Motivation.IMotivation
    	
    	//[CRMOntology.RDFLayer.DisjointAttribute("ex:subClassOf#", "IAccount")]
    	public CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Perception 
{
    
    public partial class Perception : BrightstarEntityObject, IPerception 
    {
    	public Perception(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Perception(BrightstarEntityContext context) : base(context, typeof(Perception)) { }
    	public Perception() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception
    
    	public System.Boolean benefit
    	{
            		get { return GetRelatedProperty<System.Boolean>("benefit"); }
            		set { SetRelatedProperty("benefit", value); }
    	}
    
    	public System.Boolean price
    	{
            		get { return GetRelatedProperty<System.Boolean>("price"); }
            		set { SetRelatedProperty("price", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.ICharacteristics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self 
{
    
    public partial class Self : BrightstarEntityObject, ISelf 
    {
    	public Self(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Self(BrightstarEntityContext context) : base(context, typeof(Self)) { }
    	public Self() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Characteristics.Perception.Self.ISelf
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion> Emotions
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion>("Emotions"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Emotions", value); }
    								}
    	
    	//[CRMOntology.RDFLayer.DisjointAttribute("ex:subClassOf#", "IAccount")]
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address 
{
    
    public partial class Address : BrightstarEntityObject, IAddress 
    {
    	public Address(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Address(BrightstarEntityContext context) : base(context, typeof(Address)) { }
    	public Address() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress

        public string AddressType
    	{
            get { return GetRelatedProperty<string>("AddressType"); }
            		set { SetRelatedProperty("AddressType", value); }
    	}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer> Customers
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("Customers"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Customers", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.IDemographics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address 
{
    
    public partial class Electronic : BrightstarEntityObject, IElectronic 
    {
    	public Electronic(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Electronic(BrightstarEntityContext context) : base(context, typeof(Electronic)) { }
    	public Electronic() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.IElectronic
    
    	public System.String EMailAddress
    	{
            		get { return GetRelatedProperty<System.String>("EMailAddress"); }
            		set { SetRelatedProperty("EMailAddress", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address 
{
    
    public partial class Web : BrightstarEntityObject, IWeb 
    {
    	public Web(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Web(BrightstarEntityContext context) : base(context, typeof(Web)) { }
    	public Web() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.IWeb
    
    	public System.String URL
    	{
            		get { return GetRelatedProperty<System.String>("URL"); }
            		set { SetRelatedProperty("URL", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City 
{
    
    public partial class City : BrightstarEntityObject, ICity 
    {
    	public City(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public City(BrightstarEntityContext context) : base(context, typeof(City)) { }
    	public City() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City 
{
    
    public partial class Street : BrightstarEntityObject, IStreet 
    {
    	public Street(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Street(BrightstarEntityContext context) : base(context, typeof(Street)) { }
    	public Street() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.IStreet
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.City.ICity>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country 
{
    
    public partial class Country : BrightstarEntityObject, ICountry 
    {
    	public Country(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Country(BrightstarEntityContext context) : base(context, typeof(Country)) { }
    	public Country() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.Country.ICountry
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.Address.Postal 
{
    
    public partial class Postal : BrightstarEntityObject, IPostal 
    {
    	public Postal(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Postal(BrightstarEntityContext context) : base(context, typeof(Postal)) { }
    	public Postal() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.Address.Postal.IPostal
    
    	public CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics 
{
    
    public partial class Demographics : BrightstarEntityObject, IDemographics 
    {
    	public Demographics(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Demographics(BrightstarEntityContext context) : base(context, typeof(Demographics)) { }
    	public Demographics() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.IDemographics
    
    	public System.DateTime Anniversary
    	{
            		get { return GetRelatedProperty<System.DateTime>("Anniversary"); }
            		set { SetRelatedProperty("Anniversary", value); }
    	}
    
    	public System.DateTime BirthDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("BirthDate"); }
            		set { SetRelatedProperty("BirthDate", value); }
    	}
    
    	public System.DateTime EstablishDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("EstablishDate"); }
            		set { SetRelatedProperty("EstablishDate", value); }
    	}
    
    	public System.Decimal Income
    	{
            		get { return GetRelatedProperty<System.Decimal>("Income"); }
            		set { SetRelatedProperty("Income", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics 
{
    
    public partial class Gender : BrightstarEntityObject, IGender 
    {
    	public Gender(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Gender(BrightstarEntityContext context) : base(context, typeof(Gender)) { }
    	public Gender() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.IGender

        public string Sex
    	{
            get { return GetRelatedProperty<string>("Sex"); }
            		set { SetRelatedProperty("Sex", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Demographics.IDemographics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Demographics.MartialStatus 
{
    
    public partial class MaritialStatus : BrightstarEntityObject, IMaritialStatus 
    {
    	public MaritialStatus(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public MaritialStatus(BrightstarEntityContext context) : base(context, typeof(MaritialStatus)) { }
    	public MaritialStatus() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Demographics.MartialStatus.IMaritialStatus

        public string MarriageStatus
    	{
            get { return GetRelatedProperty<string>("MarriageStatus"); }
            		set { SetRelatedProperty("MarriageStatus", value); }
    	}
    	
    	//[CRMOntology.RDFLayer.DisjointAttribute("ex:subClassOf#", "IAccount")]
    	public CRMOntology.RDFLayer.Entities.Demographics.IDemographics baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Demographics.IDemographics>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Annotation : BrightstarEntityObject, IAnnotation 
    {
    	public Annotation(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Annotation(BrightstarEntityContext context) : base(context, typeof(Annotation)) { }
    	public Annotation() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IAnnotation
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IAttachment> Attachments
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IAttachment>("Attachments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Attachments", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Article : BrightstarEntityObject, IArticle 
    {
    	public Article(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Article(BrightstarEntityContext context) : base(context, typeof(Article)) { }
    	public Article() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IArticle
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Attachment : BrightstarEntityObject, IAttachment 
    {
    	public Attachment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Attachment(BrightstarEntityContext context) : base(context, typeof(Attachment)) { }
    	public Attachment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IAttachment
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IAnnotation> Annotations
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IAnnotation>("Annotations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Annotations", value); }
    								}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Connection : BrightstarEntityObject, IConnection 
    {
    	public Connection(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Connection(BrightstarEntityContext context) : base(context, typeof(Connection)) { }
    	public Connection() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IConnection
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class ConnectionRole : BrightstarEntityObject, IConnectionRole 
    {
    	public ConnectionRole(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConnectionRole(BrightstarEntityContext context) : base(context, typeof(ConnectionRole)) { }
    	public ConnectionRole() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IConnectionRole
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IConnection> Connections
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IConnection>("Connections"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Connections", value); }
    								}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class ConnectionRoleCategory : BrightstarEntityObject, IConnectionRoleCategory 
    {
    	public ConnectionRoleCategory(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConnectionRoleCategory(BrightstarEntityContext context) : base(context, typeof(ConnectionRoleCategory)) { }
    	public ConnectionRoleCategory() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IConnectionRoleCategory
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IConnectionRole> ConnectionRoles
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IConnectionRole>("ConnectionRoles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ConnectionRoles", value); }
    								}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class KbArticle : BrightstarEntityObject, IKbArticle 
    {
    	public KbArticle(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public KbArticle(BrightstarEntityContext context) : base(context, typeof(KbArticle)) { }
    	public KbArticle() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IKbArticle
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Role : BrightstarEntityObject, IRole 
    {
    	public Role(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Role(BrightstarEntityContext context) : base(context, typeof(Role)) { }
    	public Role() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.IRole
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Subject : BrightstarEntityObject, ISubject 
    {
    	public Subject(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Subject(BrightstarEntityContext context) : base(context, typeof(Subject)) { }
    	public Subject() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.ISubject
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities 
{
    
    public partial class Team : BrightstarEntityObject, ITeam 
    {
    	public Team(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Team(BrightstarEntityContext context) : base(context, typeof(Team)) { }
    	public Team() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.ITeam
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality 
{
    
    public partial class Churn : BrightstarEntityObject, IChurn 
    {
    	public Churn(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Churn(BrightstarEntityContext context) : base(context, typeof(Churn)) { }
    	public Churn() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.IChurn
    
    	public System.Int32 Rate
    	{
            		get { return GetRelatedProperty<System.Int32>("Rate"); }
            		set { SetRelatedProperty("Rate", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality 
{
    
    public partial class Loyality : BrightstarEntityObject, ILoyality 
    {
    	public Loyality(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Loyality(BrightstarEntityContext context) : base(context, typeof(Loyality)) { }
    	public Loyality() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.ILoyality
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality 
{
    
    public partial class Retention : BrightstarEntityObject, IRetention 
    {
    	public Retention(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Retention(BrightstarEntityContext context) : base(context, typeof(Retention)) { }
    	public Retention() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.IRetention
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Marketing.IMarketing> Marketings
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>("Marketings"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Marketings", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Sales.IOpportunity> Opportunities
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Sales.IOpportunity>("Opportunities"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Opportunities", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality.Reward 
{
    
    public partial class Reward : BrightstarEntityObject, IReward 
    {
    	public Reward(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Reward(BrightstarEntityContext context) : base(context, typeof(Reward)) { }
    	public Reward() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.Reward.IReward

        public string Avantgarde
    	{
            get { return GetRelatedProperty<string>("Avantgarde"); }
            		set { SetRelatedProperty("Avantgarde", value); }
    	}

        public string Classic
    	{
            get { return GetRelatedProperty<string>("Classic"); }
            		set { SetRelatedProperty("Classic", value); }
    	}

        public string VIP
    	{
            get { return GetRelatedProperty<string>("VIP"); }
            		set { SetRelatedProperty("VIP", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Loyality.ILoyality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.ILoyality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.ILoyality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality.Segment 
{
    
    public partial class Gold : BrightstarEntityObject, IGold 
    {
    	public Gold(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Gold(BrightstarEntityContext context) : base(context, typeof(Gold)) { }
    	public Gold() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.Segment.IGold
    
    	public CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality.Segment 
{
    
    public partial class Premium : BrightstarEntityObject, IPremium 
    {
    	public Premium(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Premium(BrightstarEntityContext context) : base(context, typeof(Premium)) { }
    	public Premium() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.Segment.IPremium
    
    	public CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality.Segment 
{
    
    public partial class Segment : BrightstarEntityObject, ISegment 
    {
    	public Segment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Segment(BrightstarEntityContext context) : base(context, typeof(Segment)) { }
    	public Segment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment
    
    	public CRMOntology.RDFLayer.Entities.Loyality.ILoyality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.ILoyality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.ILoyality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Loyality.Segment 
{
    
    public partial class Silver : BrightstarEntityObject, ISilver 
    {
    	public Silver(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Silver(BrightstarEntityContext context) : base(context, typeof(Silver)) { }
    	public Silver() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Loyality.Segment.ISilver
    
    	public CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Loyality.Segment.ISegment>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Marketing 
{
    
    public partial class Campaign : BrightstarEntityObject, ICampaign 
    {
    	public Campaign(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Campaign(BrightstarEntityContext context) : base(context, typeof(Campaign)) { }
    	public Campaign() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Marketing.ICampaign
    
    	public CRMOntology.RDFLayer.Entities.Marketing.IMarketing baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Marketing 
{
    
    public partial class Goal : BrightstarEntityObject, IGoal 
    {
    	public Goal(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Goal(BrightstarEntityContext context) : base(context, typeof(Goal)) { }
    	public Goal() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Marketing.IGoal
    
    	public CRMOntology.RDFLayer.Entities.Marketing.IMarketing baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Marketing.IMarketing>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Marketing 
{
    
    public partial class Marketing : BrightstarEntityObject, IMarketing 
    {
    	public Marketing(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Marketing(BrightstarEntityContext context) : base(context, typeof(Marketing)) { }
    	public Marketing() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Marketing.IMarketing
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Account 
{
    
    public partial class Account : BrightstarEntityObject, IAccount 
    {
    	public Account(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Account(BrightstarEntityContext context) : base(context, typeof(Account)) { }
    	public Account() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IAnnotation> Annotations
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IAnnotation>("Annotations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Annotations", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IAppointment> Appointments
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IAppointment>("Appointments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Appointments", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IEmail> EMails
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IEmail>("EMails"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EMails", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IFax> Faxes
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IFax>("Faxes"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Faxes", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Case.IIncident> Incidents
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Case.IIncident>("Incidents"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Incidents", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.ILetter> Letters
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.ILetter>("Letters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Letters", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IPhone> Phones
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IPhone>("Phones"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Phones", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.ITask> Tasks
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.ITask>("Tasks"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Tasks", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.ISystemUser> SystemUsers
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.ISystemUser>("SystemUsers"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SystemUsers", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress> Addresses
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("Addresses"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Addresses", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile 
{
    
    public partial class Profile : BrightstarEntityObject, IProfile 
    {
    	public Profile(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Profile(BrightstarEntityContext context) : base(context, typeof(Profile)) { }
    	public Profile() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Account.Profile.IProfile

        public string Industry
    	{
            get { return GetRelatedProperty<string>("Industry"); }
            		set { SetRelatedProperty("Industry", value); }
    	}

        public string Ownership
    	{
            get { return GetRelatedProperty<string>("Ownership"); }
            		set { SetRelatedProperty("Ownership", value); }
    	}
    
    	public System.String code
    	{
            		get { return GetRelatedProperty<System.String>("code"); }
            		set { SetRelatedProperty("code", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type 
{
    
    public partial class Governments : BrightstarEntityObject, IGovernments 
    {
    	public Governments(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Governments(BrightstarEntityContext context) : base(context, typeof(Governments)) { }
    	public Governments() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IGovernments
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type 
{
    
    public partial class NonGovernments : BrightstarEntityObject, INonGovernments 
    {
    	public NonGovernments(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public NonGovernments(BrightstarEntityContext context) : base(context, typeof(NonGovernments)) { }
    	public NonGovernments() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.INonGovernments
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type 
{
    
    public partial class Type : BrightstarEntityObject, IType 
    {
    	public Type(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Type(BrightstarEntityContext context) : base(context, typeof(Type)) { }
    	public Type() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Account.Type.IType

        public string Corporation
    	{
            get { return GetRelatedProperty<string>("Corporation"); }
            		set { SetRelatedProperty("Corporation", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions 
{
    
    public partial class Emotion : BrightstarEntityObject, IEmotion 
    {
    	public Emotion(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Emotion(BrightstarEntityContext context) : base(context, typeof(Emotion)) { }
    	public Emotion() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Emotions.IEmotion

        public string ValueAdded
    	{
            get { return GetRelatedProperty<string>("ValueAdded"); }
            		set { SetRelatedProperty("ValueAdded", value); }
    	}

        public string ValueDestroy
    	{
            get { return GetRelatedProperty<string>("ValueDestroy"); }
            		set { SetRelatedProperty("ValueDestroy", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact 
{
    
    public partial class Contact : BrightstarEntityObject, IContact 
    {
    	public Contact(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Contact(BrightstarEntityContext context) : base(context, typeof(Contact)) { }
    	public Contact() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.IAnnotation> Annotations
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.IAnnotation>("Annotations"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Annotations", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IAppointment> Appointments
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IAppointment>("Appointments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Appointments", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IEmail> EMails
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IEmail>("EMails"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EMails", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IFax> Faxes
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IFax>("Faxes"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Faxes", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Case.IIncident> Incidents
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Case.IIncident>("Incidents"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Incidents", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.ILetter> Letters
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.ILetter>("Letters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Letters", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.IPhone> Phones
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.IPhone>("Phones"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Phones", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Activity.ITask> Tasks
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Activity.ITask>("Tasks"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Tasks", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.ISystemUser> SystemUsers
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.ISystemUser>("SystemUsers"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SystemUsers", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> PrimaryContactForAccounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("PrimaryContactForAccounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("PrimaryContactForAccounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress> Addresses
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Demographics.Address.IAddress>("Addresses"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Addresses", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class Aggreeableness : BrightstarEntityObject, IAggreeableness 
    {
    	public Aggreeableness(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Aggreeableness(BrightstarEntityContext context) : base(context, typeof(Aggreeableness)) { }
    	public Aggreeableness() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IAggreeableness
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception perception
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class Conscientiousness : BrightstarEntityObject, IConscientiousness 
    {
    	public Conscientiousness(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Conscientiousness(BrightstarEntityContext context) : base(context, typeof(Conscientiousness)) { }
    	public Conscientiousness() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IConscientiousness
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception perception
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class ExtraVersion : BrightstarEntityObject, IExtraVersion 
    {
    	public ExtraVersion(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ExtraVersion(BrightstarEntityContext context) : base(context, typeof(ExtraVersion)) { }
    	public ExtraVersion() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IExtraVersion
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception perception
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class Neuroticism : BrightstarEntityObject, INeuroticism 
    {
    	public Neuroticism(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Neuroticism(BrightstarEntityContext context) : base(context, typeof(Neuroticism)) { }
    	public Neuroticism() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.INeuroticism
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception Negative
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("Negative"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("Negative", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class Openness : BrightstarEntityObject, IOpenness 
    {
    	public Openness(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Openness(BrightstarEntityContext context) : base(context, typeof(Openness)) { }
    	public Openness() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IOpenness
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality 
{
    
    public partial class Personality : BrightstarEntityObject, IPersonality 
    {
    	public Personality(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Personality(BrightstarEntityContext context) : base(context, typeof(Personality)) { }
    	public Personality() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.Contact.Personality.IPersonality
    
    	public CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception perception
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Characteristics.Perception.IPerception>("perception", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer 
{
    
    public partial class Customer : BrightstarEntityObject, ICustomer 
    {
    	public Customer(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Customer(BrightstarEntityContext context) : base(context, typeof(Customer)) { }
    	public Customer() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer
    
    	public CRMOntology.RDFLayer.Entities.Party.IParty baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party.Customer 
{
    
    public partial class Lead : BrightstarEntityObject, ILead 
    {
    	public Lead(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Lead(BrightstarEntityContext context) : base(context, typeof(Lead)) { }
    	public Lead() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.Customer.ILead
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party 
{
    
    public partial class BusinessUnit : BrightstarEntityObject, IBusinessUnit 
    {
    	public BusinessUnit(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public BusinessUnit(BrightstarEntityContext context) : base(context, typeof(BusinessUnit)) { }
    	public BusinessUnit() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.IBusinessUnit
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.ISystemUser> SystemUsers
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.ISystemUser>("SystemUsers"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SystemUsers", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Party.IParty baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party 
{
    
    public partial class Competitor : BrightstarEntityObject, ICompetitor 
    {
    	public Competitor(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Competitor(BrightstarEntityContext context) : base(context, typeof(Competitor)) { }
    	public Competitor() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.ICompetitor
    
    	public CRMOntology.RDFLayer.Entities.Party.IParty baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party 
{
    
    public partial class Party : BrightstarEntityObject, IParty 
    {
    	public Party(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Party(BrightstarEntityContext context) : base(context, typeof(Party)) { }
    	public Party() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.IParty
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Party 
{
    
    public partial class SystemUser : BrightstarEntityObject, ISystemUser 
    {
    	public SystemUser(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SystemUser(BrightstarEntityContext context) : base(context, typeof(SystemUser)) { }
    	public SystemUser() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Party.ISystemUser
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.ITeam> Teams
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.ITeam>("Teams"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Teams", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.IBusinessUnit> BusinessUnits
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.IBusinessUnit>("BusinessUnits"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("BusinessUnits", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Party.IParty baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.IParty>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class Call : BrightstarEntityObject, ICall 
    {
    	public Call(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Call(BrightstarEntityContext context) : base(context, typeof(Call)) { }
    	public Call() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.ICall
    
    	public System.Boolean canCall
    	{
            		get { return GetRelatedProperty<System.Boolean>("canCall"); }
            		set { SetRelatedProperty("canCall", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Preference.IPreference baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class Preference : BrightstarEntityObject, IPreference 
    {
    	public Preference(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Preference(BrightstarEntityContext context) : base(context, typeof(Preference)) { }
    	public Preference() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.IPreference

        public string PreferredMethodCode
    	{
            get { return GetRelatedProperty<string>("PreferredMethodCode"); }
            		set { SetRelatedProperty("PreferredMethodCode", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class SendBulkEMail : BrightstarEntityObject, ISendBulkEMail 
    {
    	public SendBulkEMail(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SendBulkEMail(BrightstarEntityContext context) : base(context, typeof(SendBulkEMail)) { }
    	public SendBulkEMail() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.ISendBulkEMail
    
    	public System.Boolean canSendBulkEMail
    	{
            		get { return GetRelatedProperty<System.Boolean>("canSendBulkEMail"); }
            		set { SetRelatedProperty("canSendBulkEMail", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Preference.IPreference baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class SendEMail : BrightstarEntityObject, ISendEMail 
    {
    	public SendEMail(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SendEMail(BrightstarEntityContext context) : base(context, typeof(SendEMail)) { }
    	public SendEMail() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.ISendEMail
    
    	public System.Boolean canSendEMail
    	{
            		get { return GetRelatedProperty<System.Boolean>("canSendEMail"); }
            		set { SetRelatedProperty("canSendEMail", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Preference.IPreference baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class SendFax : BrightstarEntityObject, ISendFax 
    {
    	public SendFax(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SendFax(BrightstarEntityContext context) : base(context, typeof(SendFax)) { }
    	public SendFax() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.ISendFax
    
    	public System.Boolean canSendFax
    	{
            		get { return GetRelatedProperty<System.Boolean>("canSendFax"); }
            		set { SetRelatedProperty("canSendFax", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Preference.IPreference baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Preference 
{
    
    public partial class SendMail : BrightstarEntityObject, ISendMail 
    {
    	public SendMail(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SendMail(BrightstarEntityContext context) : base(context, typeof(SendMail)) { }
    	public SendMail() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Preference.ISendMail
    
    	public System.Boolean canSendMail
    	{
            		get { return GetRelatedProperty<System.Boolean>("canSendMail"); }
            		set { SetRelatedProperty("canSendMail", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Preference.IPreference baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Preference.IPreference>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales 
{
    
    public partial class Invoice : BrightstarEntityObject, IInvoice 
    {
    	public Invoice(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Invoice(BrightstarEntityContext context) : base(context, typeof(Invoice)) { }
    	public Invoice() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.IInvoice
    
    	public CRMOntology.RDFLayer.Entities.Sales.ISales baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales 
{
    
    public partial class Opportunity : BrightstarEntityObject, IOpportunity 
    {
    	public Opportunity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Opportunity(BrightstarEntityContext context) : base(context, typeof(Opportunity)) { }
    	public Opportunity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.IOpportunity
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount> Accounts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Account.IAccount>("Accounts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Accounts", value); }
    								}
    	public System.Collections.Generic.ICollection<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact> Contacts
    	{
    		get { return GetRelatedObjects<CRMOntology.RDFLayer.Entities.Party.Customer.Contact.IContact>("Contacts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Contacts", value); }
    								}
    
    	public CRMOntology.RDFLayer.Entities.Sales.ISales baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales 
{
    
    public partial class Order : BrightstarEntityObject, IOrder 
    {
    	public Order(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Order(BrightstarEntityContext context) : base(context, typeof(Order)) { }
    	public Order() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.IOrder
    
    	public CRMOntology.RDFLayer.Entities.Sales.ISales baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales 
{
    
    public partial class Quote : BrightstarEntityObject, IQuote 
    {
    	public Quote(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Quote(BrightstarEntityContext context) : base(context, typeof(Quote)) { }
    	public Quote() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.IQuote
    
    	public CRMOntology.RDFLayer.Entities.Sales.ISales baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales 
{
    
    public partial class Sales : BrightstarEntityObject, ISales 
    {
    	public Sales(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Sales(BrightstarEntityContext context) : base(context, typeof(Sales)) { }
    	public Sales() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.ISales
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales.Product 
{
    
    public partial class Goods : BrightstarEntityObject, IGoods 
    {
    	public Goods(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Goods(BrightstarEntityContext context) : base(context, typeof(Goods)) { }
    	public Goods() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.Product.IGoods
    
    	public CRMOntology.RDFLayer.Entities.Sales.Product.IProduct baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales.Product 
{
    
    public partial class Processes : BrightstarEntityObject, IProcesses 
    {
    	public Processes(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Processes(BrightstarEntityContext context) : base(context, typeof(Processes)) { }
    	public Processes() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.Product.IProcesses
    
    	public CRMOntology.RDFLayer.Entities.Sales.Product.IProduct baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales.Product 
{
    
    public partial class Product : BrightstarEntityObject, IProduct 
    {
    	public Product(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Product(BrightstarEntityContext context) : base(context, typeof(Product)) { }
    	public Product() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.Product.IProduct
    
    	public CRMOntology.RDFLayer.Entities.Sales.ISales baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.ISales>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Sales.Product 
{
    
    public partial class Services : BrightstarEntityObject, IServices 
    {
    	public Services(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Services(BrightstarEntityContext context) : base(context, typeof(Services)) { }
    	public Services() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Sales.Product.IServices
    
    	public CRMOntology.RDFLayer.Entities.Sales.Product.IProduct baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Sales.Product.IProduct>("baseClass", value); }
    	}
    	#endregion
    }
}
namespace CRMOntology.RDFLayer.Entities.Shipping 
{
    
    public partial class Shipping : BrightstarEntityObject, IShipping 
    {
    	public Shipping(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Shipping(BrightstarEntityContext context) : base(context, typeof(Shipping)) { }
    	public Shipping() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of CRMOntology.RDFLayer.Entities.Shipping.IShipping

        public string FreightTerm
    	{
            get { return GetRelatedProperty<string>("FreightTerm"); }
            		set { SetRelatedProperty("FreightTerm", value); }
    	}

        public string Method
    	{
            get { return GetRelatedProperty<string>("Method"); }
            		set { SetRelatedProperty("Method", value); }
    	}
    
    	public CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer baseClass
    	{
            get { return GetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass"); }
            set { SetRelatedObject<CRMOntology.RDFLayer.Entities.Party.Customer.ICustomer>("baseClass", value); }
    	}
    	#endregion
    }
}
